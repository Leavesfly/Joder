package io.shareai.joder.domain;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;

import java.time.Instant;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

/**
 * 消息模型单元测试
 */
@DisplayName("Message 模型测试")
public class MessageTest {
    
    @Test
    @DisplayName("应该能创建带有自动生成ID和时间戳的消息")
    public void testCreateMessageWithAutoGeneratedIdAndTimestamp() {
        // Arrange
        MessageRole role = MessageRole.USER;
        String content = "Hello, AI!";
        
        // Act
        Instant beforeCreate = Instant.now();
        Message message = new Message(role, content);
        Instant afterCreate = Instant.now();
        
        // Assert
        assertNotNull(message.getId());
        assertEquals(role, message.getRole());
        assertEquals(content, message.getContent());
        assertNotNull(message.getTimestamp());
        assertTrue(message.getTimestamp().isAfter(beforeCreate.minusSeconds(1)));
        assertTrue(message.getTimestamp().isBefore(afterCreate.plusSeconds(1)));
    }
    
    @Test
    @DisplayName("应该能创建带有指定ID和时间戳的消息")
    public void testCreateMessageWithExplicitIdAndTimestamp() {
        // Arrange
        String id = UUID.randomUUID().toString();
        MessageRole role = MessageRole.ASSISTANT;
        String content = "Hello, user!";
        Instant timestamp = Instant.now();
        
        // Act
        Message message = new Message(id, role, content, timestamp);
        
        // Assert
        assertEquals(id, message.getId());
        assertEquals(role, message.getRole());
        assertEquals(content, message.getContent());
        assertEquals(timestamp, message.getTimestamp());
    }
    
    @Test
    @DisplayName("应该生成不同的消息ID")
    public void testGeneratesDifferentIds() {
        // Act
        Message message1 = new Message(MessageRole.USER, "Message 1");
        Message message2 = new Message(MessageRole.USER, "Message 2");
        
        // Assert
        assertNotEquals(message1.getId(), message2.getId());
    }
    
    @Test
    @DisplayName("应该支持所有消息角色类型")
    public void testSupportsAllMessageRoles() {
        // Act & Assert
        Message userMessage = new Message(MessageRole.USER, "User message");
        assertEquals(MessageRole.USER, userMessage.getRole());
        
        Message assistantMessage = new Message(MessageRole.ASSISTANT, "Assistant message");
        assertEquals(MessageRole.ASSISTANT, assistantMessage.getRole());
        
        Message systemMessage = new Message(MessageRole.SYSTEM, "System message");
        assertEquals(MessageRole.SYSTEM, systemMessage.getRole());
    }
    
    @Test
    @DisplayName("应该正确生成toString表示")
    public void testToStringRepresentation() {
        // Arrange
        String id = "test-id";
        Message message = new Message(id, MessageRole.USER, "Test content", Instant.parse("2024-01-01T00:00:00Z"));
        
        // Act
        String toString = message.toString();
        
        // Assert
        assertTrue(toString.contains("Message{"));
        assertTrue(toString.contains("id='test-id'"));
        assertTrue(toString.contains("role=USER"));
        assertTrue(toString.contains("content='Test content'"));
    }
    
    @Test
    @DisplayName("应该允许空白内容")
    public void testAllowsEmptyContent() {
        // Act
        Message message = new Message(MessageRole.USER, "");
        
        // Assert
        assertEquals("", message.getContent());
    }
    
    @Test
    @DisplayName("应该允许长内容")
    public void testAllowsLongContent() {
        // Arrange
        String longContent = "x".repeat(10000);
        
        // Act
        Message message = new Message(MessageRole.ASSISTANT, longContent);
        
        // Assert
        assertEquals(longContent, message.getContent());
    }
    
    @Test
    @DisplayName("应该保持消息不可变性（通过getter方法验证）")
    public void testMessageImmutability() {
        // Arrange
        Message message = new Message(MessageRole.USER, "Original content");
        String originalContent = message.getContent();
        
        // Act & Assert - 消息应该通过不可变的getter返回值
        assertEquals(originalContent, message.getContent());
        assertEquals(originalContent, message.getContent()); // 多次调用应返回相同值
    }
}
